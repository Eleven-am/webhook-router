// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Serves the main HTML frontend page",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "frontend"
                ],
                "summary": "Serve main frontend",
                "responses": {
                    "200": {
                        "description": "Frontend page HTML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Frontend not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brokers": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured message broker connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get all message brokers",
                "responses": {
                    "200": {
                        "description": "List of broker configurations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.BrokerConfig"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new message broker configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Create message broker",
                "parameters": [
                    {
                        "description": "Broker configuration",
                        "name": "broker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created broker configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brokers/types": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of supported message broker types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get broker types",
                "responses": {
                    "200": {
                        "description": "List of broker types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/brokers/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific message broker configuration by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get message broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Broker configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing message broker configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Update message broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Broker configuration",
                        "name": "broker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated broker configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update broker",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a message broker configuration",
                "tags": [
                    "brokers"
                ],
                "summary": "Delete message broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete broker",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brokers/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests connectivity to a message broker",
                "tags": [
                    "brokers"
                ],
                "summary": "Test broker connection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid broker ID or configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Broker health check failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/change-password": {
            "get": {
                "description": "Serves the HTML change password page for users with default credentials",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Serve change password page",
                "responses": {
                    "200": {
                        "description": "Change password page HTML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "302": {
                        "description": "Redirect to login or admin page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Change password page not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Updates user password and invalidates current session",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Process password change",
                "parameters": [
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password confirmation",
                        "name": "confirm_password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to login page with success message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid password or passwords do not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid session",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to change password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the application and its dependencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/login": {
            "get": {
                "description": "Serves the HTML login page",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Serve login page",
                "responses": {
                    "200": {
                        "description": "Login page HTML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Login page not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Authenticates user credentials and creates a session",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Process login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to admin or change password page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Invalidates the current session and redirects to login",
                "tags": [
                    "auth"
                ],
                "summary": "Process logout",
                "responses": {
                    "302": {
                        "description": "Redirect to login page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pipelines": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured data transformation pipelines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get all data pipelines",
                "responses": {
                    "200": {
                        "description": "List of pipelines",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new data transformation pipeline with stages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Create data pipeline",
                "parameters": [
                    {
                        "description": "Pipeline configuration",
                        "name": "pipeline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pipeline.PipelineConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created pipeline",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or pipeline validation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to register pipeline",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pipelines/metrics": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns performance metrics for pipeline executions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get pipeline metrics",
                "responses": {
                    "200": {
                        "description": "Pipeline metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pipelines/stages/types": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of supported pipeline stage types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get stage types",
                "responses": {
                    "200": {
                        "description": "List of stage types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelines/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific data transformation pipeline by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get data pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pipeline details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a data transformation pipeline",
                "tags": [
                    "pipelines"
                ],
                "summary": "Delete data pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pipelines/{id}/execute": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Executes a data transformation pipeline with test data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Execute pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test data for pipeline execution",
                        "name": "testData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pipeline execution result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Pipeline execution failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routes": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured webhook routes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routes"
                ],
                "summary": "Get all webhook routes",
                "responses": {
                    "200": {
                        "description": "List of routes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Route"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new webhook route configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routes"
                ],
                "summary": "Create webhook route",
                "parameters": [
                    {
                        "description": "Route configuration",
                        "name": "route",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Route"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created route",
                        "schema": {
                            "$ref": "#/definitions/storage.Route"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Route name already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routes/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific webhook route by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routes"
                ],
                "summary": "Get webhook route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route details",
                        "schema": {
                            "$ref": "#/definitions/storage.Route"
                        }
                    },
                    "400": {
                        "description": "Invalid route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing webhook route configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routes"
                ],
                "summary": "Update webhook route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Route configuration",
                        "name": "route",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Route"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated route",
                        "schema": {
                            "$ref": "#/definitions/storage.Route"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update route",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a webhook route configuration",
                "tags": [
                    "routes"
                ],
                "summary": "Delete webhook route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete route",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routes/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a webhook route by sending a sample payload",
                "tags": [
                    "routes"
                ],
                "summary": "Test webhook route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "No broker configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routing/metrics": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns performance metrics for the routing system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get router metrics",
                "responses": {
                    "200": {
                        "description": "Router metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routing/rules": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured advanced routing rules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get all routing rules",
                "responses": {
                    "200": {
                        "description": "List of routing rules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RouteRuleAPI"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new advanced routing rule with conditions and destinations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Create routing rule",
                "parameters": [
                    {
                        "description": "Routing rule configuration",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created routing rule",
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or rule validation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routing/rules/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific routing rule by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Routing rule",
                        "schema": {
                            "$ref": "#/definitions/models.RouteRuleAPI"
                        }
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing routing rule configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Update routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Routing rule configuration",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated routing rule",
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or rule validation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a routing rule configuration",
                "tags": [
                    "routing"
                ],
                "summary": "Delete routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/routing/rules/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a routing rule with sample request data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Test routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Route test failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns all application configuration settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get application settings",
                "responses": {
                    "200": {
                        "description": "Application settings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates multiple application configuration settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update application settings",
                "parameters": [
                    {
                        "description": "Settings to update",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated settings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns overall application statistics and metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get application statistics",
                "responses": {
                    "200": {
                        "description": "Application statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get statistics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats/routes/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns statistics and metrics for a specific webhook route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get route statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/triggers": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured triggers with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get all triggers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by trigger type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trigger status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of triggers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Trigger"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new trigger configuration for automated webhook processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Create trigger",
                "parameters": [
                    {
                        "description": "Trigger configuration",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created trigger",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/triggers/types": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of supported trigger types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get trigger types",
                "responses": {
                    "200": {
                        "description": "List of trigger types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/triggers/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific trigger configuration by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing trigger configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Update trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trigger configuration",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated trigger",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a trigger configuration",
                "tags": [
                    "triggers"
                ],
                "summary": "Delete trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/triggers/{id}/start": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Starts a specific trigger",
                "tags": [
                    "triggers"
                ],
                "summary": "Start trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Start result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to start trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/triggers/{id}/stop": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Stops a specific trigger",
                "tags": [
                    "triggers"
                ],
                "summary": "Stop trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stop result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to stop trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/triggers/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a trigger configuration",
                "tags": [
                    "triggers"
                ],
                "summary": "Test trigger",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID or configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webhook": {
            "get": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webhook/{endpoint}": {
            "get": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook endpoint name",
                        "name": "endpoint",
                        "in": "path"
                    },
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook endpoint name",
                        "name": "endpoint",
                        "in": "path"
                    },
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook endpoint name",
                        "name": "endpoint",
                        "in": "path"
                    },
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook endpoint name",
                        "name": "endpoint",
                        "in": "path"
                    },
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Processes incoming webhook requests and routes them to configured destinations",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Process incoming webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook endpoint name",
                        "name": "endpoint",
                        "in": "path"
                    },
                    {
                        "description": "Webhook payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.HealthCheckConfigAPI": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "endpoint": {
                    "type": "string"
                },
                "healthy_threshold": {
                    "type": "integer"
                },
                "interval": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "timeout": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "unhealthy_threshold": {
                    "type": "integer"
                }
            }
        },
        "models.LoadBalancingConfigAPI": {
            "type": "object",
            "properties": {
                "hash_key": {
                    "type": "string"
                },
                "session_key": {
                    "type": "string"
                },
                "sticky_session": {
                    "type": "boolean"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "models.RouteDestinationAPI": {
            "type": "object",
            "properties": {
                "broker_queue": {
                    "type": "string"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "health_check": {
                    "$ref": "#/definitions/models.HealthCheckConfigAPI"
                },
                "id": {
                    "type": "string"
                },
                "pipeline_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "timeout": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "models.RouteRuleAPI": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RuleConditionAPI"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RouteDestinationAPI"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "load_balancing": {
                    "$ref": "#/definitions/models.LoadBalancingConfigAPI"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RuleConditionAPI": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "pipeline.PipelineConfig": {
            "type": "object"
        },
        "routing.RouteRule": {
            "type": "object"
        },
        "routing.RuleCondition": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field name (for header, query conditions)",
                    "type": "string"
                },
                "negate": {
                    "description": "Negate the condition result",
                    "type": "boolean"
                },
                "operator": {
                    "description": "eq, ne, contains, regex, exists, gt, lt, in",
                    "type": "string"
                },
                "type": {
                    "description": "path, header, body, method, query, script",
                    "type": "string"
                },
                "value": {
                    "description": "Expected value"
                }
            }
        },
        "storage.BrokerConfig": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "health_status": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_health_check": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "storage.Route": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "condition_expression": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "destination_broker_id": {
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "exchange": {
                    "type": "string"
                },
                "filters": {
                    "type": "string"
                },
                "headers": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pipeline_id": {
                    "description": "New fields for Phase 1",
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                },
                "queue": {
                    "type": "string"
                },
                "routing_key": {
                    "type": "string"
                },
                "trigger_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "storage.Trigger": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_execution": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "next_execution": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "SessionAuth": {
            "type": "apiKey",
            "name": "session",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Webhook Router API",
	Description:      "Enterprise-grade webhook routing and data transformation platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
