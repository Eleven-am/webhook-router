{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/auth/change-password": {
            "post": {
                "description": "Updates user password and invalidates current session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Process password change",
                "parameters": [
                    {
                        "description": "Password change credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "confirm_password": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid password or passwords do not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid session",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to change password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/create": {
            "post": {
                "description": "Creates a new user account with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create new account",
                "parameters": [
                    {
                        "description": "Account creation credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "confirm_password": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "is_default": {
                                            "type": "boolean"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or username already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/forgot-password": {
            "post": {
                "description": "Sends a password reset email to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to send email",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticates user credentials and creates a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Process login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "is_default": {
                                            "type": "boolean"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "description": "Invalidates the current session and redirects to login",
                "tags": [
                    "auth"
                ],
                "summary": "Process logout",
                "responses": {
                    "302": {
                        "description": "Redirect to login page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/me": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns the current authenticated user's profile information with statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "Current user info with stats",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "stats": {
                                    "type": "object",
                                    "properties": {
                                        "recent_activity": {
                                            "type": "string"
                                        },
                                        "routes_count": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "created_at": {
                                            "type": "string"
                                        },
                                        "id": {
                                            "type": "string"
                                        },
                                        "is_default": {
                                            "type": "boolean"
                                        },
                                        "updated_at": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch user details",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password": {
            "post": {
                "description": "Resets user password using a valid reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token or password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to reset password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/brokers": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a paginated list of all configured message broker connections (sensitive credentials filtered)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get all message brokers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of broker configurations (credentials filtered)",
                        "schema": {
                            "$ref": "#/definitions/pagination.Response-storage_BrokerConfig"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new message broker configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Create message broker",
                "parameters": [
                    {
                        "description": "Broker configuration",
                        "name": "broker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created broker configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/brokers/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests connectivity to a message broker using provided configuration without saving",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Test broker configuration",
                "parameters": [
                    {
                        "description": "Broker configuration to test",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Connection test failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/brokers/types": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of supported message broker types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get broker types",
                "responses": {
                    "200": {
                        "description": "List of broker types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/brokers/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific message broker configuration by ID (sensitive credentials filtered)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Get message broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Broker configuration (credentials filtered)",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing message broker configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brokers"
                ],
                "summary": "Update message broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Broker configuration",
                        "name": "broker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated broker configuration",
                        "schema": {
                            "$ref": "#/definitions/storage.BrokerConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update broker",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a message broker configuration",
                "tags": [
                    "brokers"
                ],
                "summary": "Delete message broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid broker ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete broker",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/brokers/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests connectivity to a message broker",
                "tags": [
                    "brokers"
                ],
                "summary": "Test broker connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid broker ID or configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Broker health check failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/dlq/messages": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a paginated list of messages currently in the Dead Letter Queue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dlq"
                ],
                "summary": "List DLQ messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trigger ID",
                        "name": "trigger_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (pending, abandoned)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated DLQ messages",
                        "schema": {
                            "$ref": "#/definitions/pagination.Response-storage_DLQMessage"
                        }
                    },
                    "503": {
                        "description": "DLQ not configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/dlq/messages/{id}": {
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a specific message from the Dead Letter Queue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dlq"
                ],
                "summary": "Delete DLQ message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "DLQ not configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/dlq/policy": {
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates the retry policy for the Dead Letter Queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dlq"
                ],
                "summary": "Configure DLQ retry policy",
                "parameters": [
                    {
                        "description": "Retry policy configuration",
                        "name": "policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated policy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "DLQ not configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/dlq/retry": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Attempts to retry messages in the Dead Letter Queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dlq"
                ],
                "summary": "Retry DLQ messages",
                "parameters": [
                    {
                        "description": "Retry options",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retry results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "DLQ not configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/dlq/stats": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns statistics about messages in the Dead Letter Queue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dlq"
                ],
                "summary": "Get DLQ statistics",
                "responses": {
                    "200": {
                        "description": "DLQ statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "DLQ not configured",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/logs": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns paginated execution logs with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get execution logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 50, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trigger type",
                        "name": "trigger_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (success/error/processing)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range filter (1h/24h/7d/30d)",
                        "name": "time_range",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated execution logs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/logs/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific execution log",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get execution log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Execution log details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Log not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pipelines": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured data transformation pipelines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get all data pipelines",
                "responses": {
                    "200": {
                        "description": "List of pipelines",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PipelineConfig"
                            }
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new data transformation pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Create a new pipeline",
                "parameters": [
                    {
                        "description": "Pipeline configuration",
                        "name": "pipeline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PipelineConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created pipeline",
                        "schema": {
                            "$ref": "#/definitions/models.PipelineConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid pipeline configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pipelines/execute": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Executes a pipeline with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Execute a pipeline",
                "parameters": [
                    {
                        "description": "Execution request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PipelineExecutionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Execution result",
                        "schema": {
                            "$ref": "#/definitions/models.PipelineExecutionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pipelines/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns the configuration of a specific pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get a specific pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pipeline configuration",
                        "schema": {
                            "$ref": "#/definitions/models.PipelineConfig"
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing pipeline configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Update a pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pipeline configuration",
                        "name": "pipeline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PipelineConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated pipeline",
                        "schema": {
                            "$ref": "#/definitions/models.PipelineConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid pipeline configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Deletes an existing pipeline",
                "tags": [
                    "pipelines"
                ],
                "summary": "Delete a pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Pipeline deleted"
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pipelines/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a pipeline with sample data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Test a pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid test data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Pipeline engine not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/routing/metrics": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns performance metrics for the routing system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get router metrics",
                "responses": {
                    "200": {
                        "description": "Router metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/routing/rules": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of all configured advanced routing rules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get all routing rules",
                "responses": {
                    "200": {
                        "description": "List of routing rules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RouteRuleAPI"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new advanced routing rule with conditions and destinations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Create routing rule",
                "parameters": [
                    {
                        "description": "Routing rule configuration",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created routing rule",
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or rule validation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/routing/rules/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific routing rule by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Get routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Routing rule",
                        "schema": {
                            "$ref": "#/definitions/models.RouteRuleAPI"
                        }
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing routing rule configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Update routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Routing rule configuration",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated routing rule",
                        "schema": {
                            "$ref": "#/definitions/routing.RouteRule"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or rule validation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a routing rule configuration",
                "tags": [
                    "routing"
                ],
                "summary": "Delete routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/routing/rules/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a routing rule with sample request data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routing"
                ],
                "summary": "Test routing rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Rule not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Route test failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Router not initialized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns non-sensitive application configuration settings (sensitive fields are filtered)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get application settings",
                "responses": {
                    "200": {
                        "description": "Application settings (sensitive fields filtered)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates multiple application configuration settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update application settings",
                "parameters": [
                    {
                        "description": "Settings to update",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated settings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/stats": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns overall application statistics and metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get application statistics",
                "responses": {
                    "200": {
                        "description": "Application statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get statistics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/stats/dashboard": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns comprehensive statistics for the dashboard including metrics with changes, time series data, and top routes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get dashboard statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time period: 1h, 24h, 7d, 30d (default: 24h)",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include comparison with previous period (default: true)",
                        "name": "compare_previous",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by specific route ID",
                        "name": "route_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dashboard statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get dashboard statistics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/stats/routes/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns statistics and metrics for a specific webhook route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get route statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid route ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/triggers": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a paginated list of all configured triggers with optional filtering (sensitive credentials filtered)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get all triggers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trigger type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trigger status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of triggers (credentials filtered)",
                        "schema": {
                            "$ref": "#/definitions/pagination.Response-storage_Trigger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Creates a new trigger configuration for automated webhook processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Create trigger",
                "parameters": [
                    {
                        "description": "Trigger configuration",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created trigger",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/triggers/types": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a list of supported trigger types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get trigger types",
                "responses": {
                    "200": {
                        "description": "List of trigger types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/triggers/{id}": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Returns a specific trigger configuration by ID (sensitive credentials filtered)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Get trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger configuration (credentials filtered)",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Updates an existing trigger configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Update trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trigger configuration",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated trigger",
                        "schema": {
                            "$ref": "#/definitions/storage.Trigger"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Removes a trigger configuration",
                "tags": [
                    "triggers"
                ],
                "summary": "Delete trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/triggers/{id}/start": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Starts a specific trigger",
                "tags": [
                    "triggers"
                ],
                "summary": "Start trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Start result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to start trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/triggers/{id}/stop": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Stops a specific trigger",
                "tags": [
                    "triggers"
                ],
                "summary": "Stop trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stop result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to stop trigger",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/triggers/{id}/test": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Tests a trigger configuration",
                "tags": [
                    "triggers"
                ],
                "summary": "Test trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid trigger ID or configuration",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Trigger not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the application and its dependencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{username}/{path}": {
            "get": {
                "description": "Processes incoming requests to user-defined HTTP trigger endpoints",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Process HTTP trigger request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response based on trigger configuration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Processes incoming requests to user-defined HTTP trigger endpoints",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Process HTTP trigger request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response based on trigger configuration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Processes incoming requests to user-defined HTTP trigger endpoints",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Process HTTP trigger request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response based on trigger configuration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Processes incoming requests to user-defined HTTP trigger endpoints",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Process HTTP trigger request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response based on trigger configuration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Processes incoming requests to user-defined HTTP trigger endpoints",
                "consumes": [
                    "application/json",
                    "text/xml",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "Process HTTP trigger request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response based on trigger configuration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuthConfig": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "X-API-Key"
                },
                "oauth2": {
                    "$ref": "#/definitions/models.OAuth2Config"
                },
                "password": {
                    "type": "string",
                    "example": "pass123"
                },
                "token": {
                    "type": "string",
                    "example": "${env.API_TOKEN}"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "none",
                        "basic",
                        "bearer",
                        "api_key",
                        "oauth2"
                    ],
                    "example": "bearer"
                },
                "username": {
                    "type": "string",
                    "example": "user123"
                },
                "value": {
                    "type": "string",
                    "example": "${secrets.api_key}"
                }
            }
        },
        "models.BranchAction": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BranchCondition"
                    }
                },
                "default": {
                    "type": "string",
                    "example": "fallback_stage"
                }
            }
        },
        "models.BranchCondition": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "example": "data.type == 'order'"
                },
                "target": {
                    "type": "string",
                    "example": "process_order"
                }
            }
        },
        "models.CacheConfig": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "user_${data.user_id}"
                },
                "ttl": {
                    "type": "string",
                    "example": "5m"
                }
            }
        },
        "models.ErrorHandling": {
            "type": "object",
            "properties": {
                "delay": {
                    "type": "string",
                    "example": "1s"
                },
                "fallback": {
                    "type": "string",
                    "example": "default_value"
                },
                "retries": {
                    "type": "integer",
                    "example": 3
                },
                "strategy": {
                    "type": "string",
                    "enum": [
                        "continue",
                        "retry",
                        "fail",
                        "fallback"
                    ],
                    "example": "continue"
                }
            }
        },
        "models.FilterAction": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "example": "data.status == 'active'"
                },
                "jq": {
                    "type": "string",
                    "example": ".[] | select(.status == \"active\")"
                },
                "keep": {
                    "type": "boolean",
                    "example": true
                },
                "script": {
                    "type": "string",
                    "example": "return data.filter(d =\u003e d.active);"
                },
                "target": {
                    "type": "string",
                    "example": "items"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "expression",
                        "javascript",
                        "jq"
                    ],
                    "example": "expression"
                }
            }
        },
        "models.ForeachAction": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "string",
                    "example": "idx"
                },
                "items": {
                    "type": "string",
                    "example": "data.orders"
                },
                "max_items": {
                    "type": "integer",
                    "example": 100
                },
                "parallel": {
                    "type": "boolean",
                    "example": true
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['process_item'",
                        "'save_item']"
                    ]
                },
                "variable": {
                    "type": "string",
                    "example": "order"
                }
            }
        },
        "models.HTTPAction": {
            "type": "object",
            "properties": {
                "auth": {
                    "$ref": "#/definitions/models.AuthConfig"
                },
                "body": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "PATCH",
                        "DELETE"
                    ],
                    "example": "POST"
                },
                "query_params": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "retry": {
                    "$ref": "#/definitions/models.RetryConfig"
                },
                "timeout": {
                    "type": "string",
                    "example": "30s"
                },
                "url": {
                    "type": "string",
                    "example": "https://api.example.com/webhook"
                }
            }
        },
        "models.HealthCheckConfigAPI": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "endpoint": {
                    "type": "string"
                },
                "healthy_threshold": {
                    "type": "integer"
                },
                "interval": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "timeout": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "unhealthy_threshold": {
                    "type": "integer"
                }
            }
        },
        "models.LoadBalancingConfigAPI": {
            "type": "object",
            "properties": {
                "hash_key": {
                    "type": "string"
                },
                "session_key": {
                    "type": "string"
                },
                "sticky_session": {
                    "type": "boolean"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "models.OAuth2Config": {
            "type": "object",
            "properties": {
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['read'",
                        "'write']"
                    ]
                },
                "service_id": {
                    "type": "string",
                    "example": "google_calendar"
                }
            }
        },
        "models.ParallelAction": {
            "type": "object",
            "properties": {
                "merge_results": {
                    "type": "boolean",
                    "example": true
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['fetch_user'",
                        "'fetch_orders'",
                        "'fetch_profile']"
                    ]
                },
                "target_field": {
                    "type": "string",
                    "example": "results"
                },
                "wait_all": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.PipelineAPI": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_timeout": {
                    "type": "string",
                    "example": "30s"
                },
                "description": {
                    "type": "string",
                    "example": "Processes incoming webhook data"
                },
                "id": {
                    "type": "string",
                    "example": "pipe_123"
                },
                "name": {
                    "type": "string",
                    "example": "Data Processing Pipeline"
                },
                "resources": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StageAPI"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "models.PipelineConfig": {
            "description": "Pipeline configuration for data transformation",
            "type": "object",
            "properties": {
                "defaultTimeout": {
                    "type": "string",
                    "example": "30s"
                },
                "id": {
                    "type": "string",
                    "example": "pipe_123"
                },
                "name": {
                    "type": "string",
                    "example": "Data Processing Pipeline"
                },
                "resources": {
                    "type": "object",
                    "additionalProperties": true
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PipelineStageConfig"
                    }
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "models.PipelineExecutionRequest": {
            "type": "object"
        },
        "models.PipelineExecutionResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "execution_time": {
                    "type": "string",
                    "example": "125ms"
                },
                "result": {
                    "type": "object"
                },
                "stage_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StageExecutionResult"
                    }
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.PipelineStageConfig": {
            "description": "Individual stage configuration within a pipeline",
            "type": "object",
            "properties": {
                "action": {
                    "type": "object"
                },
                "dependsOn": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"input\"",
                        " \"validate\"]"
                    ]
                },
                "filter": {
                    "type": "object"
                },
                "id": {
                    "type": "string",
                    "example": "transform_1"
                },
                "items": {
                    "type": "string",
                    "example": "data.items"
                },
                "onError": {
                    "type": "object"
                },
                "target": {
                    "type": "string",
                    "example": "data.result"
                },
                "timeout": {
                    "type": "string",
                    "example": "30s"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "input",
                        "output",
                        "transform",
                        "http",
                        "validate",
                        "filter",
                        "branch",
                        "choice",
                        "cache",
                        "publish",
                        "foreach",
                        "metadata"
                    ],
                    "example": "transform"
                }
            }
        },
        "models.PublishAction": {
            "type": "object",
            "properties": {
                "broker": {
                    "type": "string",
                    "example": "main_broker"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string",
                    "example": "${data.user_id}"
                },
                "topic": {
                    "type": "string",
                    "example": "processed_events"
                }
            }
        },
        "models.RetryConfig": {
            "type": "object",
            "properties": {
                "backoff": {
                    "type": "string",
                    "enum": [
                        "constant",
                        "linear",
                        "exponential"
                    ],
                    "example": "exponential"
                },
                "delay": {
                    "type": "string",
                    "example": "1s"
                },
                "max_attempts": {
                    "type": "integer",
                    "example": 3
                },
                "max_delay": {
                    "type": "string",
                    "example": "30s"
                }
            }
        },
        "models.RouteDestinationAPI": {
            "type": "object",
            "properties": {
                "broker_queue": {
                    "type": "string"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "health_check": {
                    "$ref": "#/definitions/models.HealthCheckConfigAPI"
                },
                "id": {
                    "type": "string"
                },
                "pipeline_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "timeout": {
                    "description": "Duration as string",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "models.RouteRuleAPI": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RuleConditionAPI"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RouteDestinationAPI"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "load_balancing": {
                    "$ref": "#/definitions/models.LoadBalancingConfigAPI"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RuleConditionAPI": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "models.StageAPI": {
            "type": "object",
            "properties": {
                "branch": {
                    "$ref": "#/definitions/models.BranchAction"
                },
                "cache": {
                    "$ref": "#/definitions/models.CacheConfig"
                },
                "depends_on": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['validate_1']"
                    ]
                },
                "filter": {
                    "$ref": "#/definitions/models.FilterAction"
                },
                "foreach": {
                    "$ref": "#/definitions/models.ForeachAction"
                },
                "http": {
                    "$ref": "#/definitions/models.HTTPAction"
                },
                "id": {
                    "type": "string",
                    "example": "transform_1"
                },
                "on_error": {
                    "$ref": "#/definitions/models.ErrorHandling"
                },
                "parallel": {
                    "$ref": "#/definitions/models.ParallelAction"
                },
                "publish": {
                    "$ref": "#/definitions/models.PublishAction"
                },
                "target": {
                    "type": "string",
                    "example": "data.user"
                },
                "timeout": {
                    "type": "string",
                    "example": "10s"
                },
                "transform": {
                    "description": "Stage-specific configuration (only one should be set based on type)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransformAction"
                        }
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "transform",
                        "http",
                        "validate",
                        "filter",
                        "branch",
                        "cache",
                        "publish",
                        "foreach",
                        "parallel"
                    ],
                    "example": "transform"
                },
                "validate": {
                    "$ref": "#/definitions/models.ValidateAction"
                }
            }
        },
        "models.StageExecutionResult": {
            "type": "object",
            "properties": {
                "cached": {
                    "type": "boolean",
                    "example": false
                },
                "duration": {
                    "type": "string",
                    "example": "25ms"
                },
                "error": {
                    "type": "string"
                },
                "input": {
                    "type": "object"
                },
                "output": {
                    "type": "object"
                },
                "stage_id": {
                    "type": "string",
                    "example": "transform_1"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.TransformAction": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "example": ".data | map(select(.active))"
                },
                "fields": {
                    "type": "object"
                },
                "from": {
                    "type": "string",
                    "example": "data.source"
                },
                "script": {
                    "type": "string",
                    "example": "return data.map(d =\u003e d.value * 2);"
                },
                "template": {
                    "type": "string",
                    "example": "Hello ${data.name}"
                },
                "to": {
                    "type": "string",
                    "example": "data.destination"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "set",
                        "delete",
                        "copy",
                        "move",
                        "merge",
                        "template",
                        "jq",
                        "javascript"
                    ],
                    "example": "set"
                },
                "value": {
                    "type": "string",
                    "example": "processed"
                }
            }
        },
        "models.ValidateAction": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "number",
                    "example": 100
                },
                "message": {
                    "type": "string",
                    "example": "Invalid format"
                },
                "min": {
                    "type": "number",
                    "example": 0
                },
                "pattern": {
                    "type": "string",
                    "example": "^[A-Z]{3}[0-9]{4}$"
                },
                "properties": {
                    "type": "object"
                },
                "required": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['user_id'",
                        "'email']"
                    ]
                },
                "schema": {
                    "type": "object"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "required",
                        "type",
                        "range",
                        "regex",
                        "custom",
                        "schema"
                    ],
                    "example": "schema"
                }
            }
        },
        "pagination.Response-storage_BrokerConfig": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.BrokerConfig"
                    }
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "pagination.Response-storage_DLQMessage": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.DLQMessage"
                    }
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "pagination.Response-storage_Trigger": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.Trigger"
                    }
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "routing.RouteRule": {
            "type": "object"
        },
        "routing.RuleCondition": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field name (required for header, query, body_json, context conditions)",
                    "type": "string"
                },
                "negate": {
                    "description": "Whether to negate the condition result (NOT operation)",
                    "type": "boolean"
                },
                "operator": {
                    "description": "Comparison operator: eq, ne, contains, regex, exists, gt, lt, gte, lte, in, starts_with, ends_with, cidr",
                    "type": "string"
                },
                "type": {
                    "description": "Condition type: path, header, body, method, query, body_json, remote_addr, user_agent, size, context",
                    "type": "string"
                },
                "value": {
                    "description": "Expected value to compare against"
                }
            }
        },
        "storage.BrokerConfig": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "dlq_broker_id": {
                    "type": "string"
                },
                "dlq_enabled": {
                    "type": "boolean"
                },
                "health_status": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_health_check": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "storage.DLQMessage": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "broker_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "exchange": {
                    "type": "string"
                },
                "failure_count": {
                    "type": "integer"
                },
                "first_failure": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "last_failure": {
                    "type": "string"
                },
                "message_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "next_retry": {
                    "type": "string"
                },
                "pipeline_id": {
                    "type": "string"
                },
                "queue": {
                    "type": "string"
                },
                "routing_key": {
                    "type": "string"
                },
                "status": {
                    "description": "pending, retrying, abandoned",
                    "type": "string"
                },
                "trigger_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "storage.Trigger": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "config": {
                    "description": "For HTTP triggers, includes path, method, etc.",
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "destination_broker_id": {
                    "type": "string"
                },
                "dlq_broker_id": {
                    "description": "DLQ configuration",
                    "type": "string"
                },
                "dlq_enabled": {
                    "type": "boolean"
                },
                "dlq_retry_max": {
                    "type": "integer"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_execution": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "next_execution": {
                    "type": "string"
                },
                "pipeline_id": {
                    "description": "Routing and processing configuration",
                    "type": "string"
                },
                "signature_config": {
                    "description": "Signature configuration (for HTTP triggers)",
                    "type": "string"
                },
                "signature_secret": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "User association",
                    "type": "string"
                }
            }
        }
    }
}