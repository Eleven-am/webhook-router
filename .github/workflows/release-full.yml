name: Full Release Workflow

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24'

jobs:
  # Build Go binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu
          go mod download

      - name: Build binary
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Set cross-compilation flags for Linux ARM64
          if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          
          # Disable CGO for non-Linux builds (SQLite requirement)
          if [ "$GOOS" != "linux" ]; then
            export CGO_ENABLED=0
          fi
          
          go build -ldflags "-X main.Version=${{ github.ref_name }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o webhook-router-${{ matrix.suffix }} main_no_frontend.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webhook-router-${{ matrix.suffix }}
          path: webhook-router-${{ matrix.suffix }}

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: Build and push server-only image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-server
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub Release
  create-release:
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            sha256sum * > ../$(basename "$dir").sha256
            cd ..
          done
          
      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -name "webhook-router-*" -exec mv {} release/ \;
          find artifacts -type f -name "*.sha256" -exec mv {} release/ \;
          cd release && sha256sum * > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          body: |
            ## Docker Images
            
            Production image (with PostgreSQL/Redis support):
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            Server-only image (lightweight, no frontend):
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-server
            ```
            
            ## Binary Downloads
            
            See attached files below. All binaries include:
            - SQLite support (Linux only due to CGO requirement)
            - PostgreSQL support
            - Redis support (optional)
            
            ## What's Changed
            
            See the automatically generated release notes below.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}